:alias player-move          vd
:alias is-player-move-valid vc
:alias blank-index          vb

:const UP    0
:const LEFT  2
:const DOWN  1
:const RIGHT 3

:const K-UP    5
:const K-LEFT  7
:const K-DOWN  8
:const K-RIGHT 9

: display-board
	clear
	v3 := 0  # board index

	loop
		v8 := v3
		v8 += 1
		get-tile-coordinates
		if v3 != blank-index then display-block
		v3 += 1
	if v3 != 16 then again
	
	return

: animate-move
	# assign index of tile that is sliding to v3
	# blank-index by now has been reassigned to the new blank spot
	# which is where the sliding block currently resides
	v3 := blank-index
	if player-move == UP begin
		v0 := 4
		v3 -= v0
	end
	if player-move == LEFT begin
		v0 := 1
		v3 -= v0
	end
	if player-move == DOWN begin
		v0 := 4
		v3 += v0
	end
	if player-move == RIGHT begin
		v0 := 1
		v3 += v0
	end
	i := board
	i += v3
	load v0
	v8 := v0
	v3 := blank-index

	# do actual animation
	get-tile-coordinates
	display-block
	v6 := 0
	v7 := 1
	loop
		get-tile-coordinates
		if player-move == UP then v2 -= v6
		if player-move == LEFT then v1 -= v6
		if player-move == DOWN then v2 += v6
		if player-move == RIGHT then v1 += v6
		display-block
		v0 := 2
		delay := v0
		loop
			v0 := delay
		if v0 != 0 then again
		display-block
		v6 += v7
	if v6 != 8 then again
	get-tile-coordinates
	if player-move == UP then v2 -= v6
	if player-move == LEFT then v1 -= v6
	if player-move == DOWN then v2 += v6
	if player-move == RIGHT then v1 += v6
	display-block

	return
	

# parameters: v1 - x position
# parameters: v2 - y position
# parameters: v3 - board index
# parameters: v8 - tile value
: display-block
	i := tile
	sprite v1 v2 7

	v0 := 1
	v1 += v0
	v2 += v0
	i := hex v8
	sprite v1 v2 5
	v0 := 1
	v1 -= v0
	v2 -= v0
	
	return

# parameters: v3 - board index
# returns:    v1 - x position
# returns:    v2 - y position
: get-tile-coordinates
	v0 := 0b11
	
	# find x coordinate
	v0 &= v3
	v4 := 0
	if v0 == v4 then v1 := 2

	v0 &= v3
	v4 := 1
	if v0 == v4 then v1 := 10

	v0 &= v3
	v4 := 2
	if v0 == v4 then v1 := 18

	v0 &= v3
	v4 := 3
	if v0 == v4 then v1 := 26

	# find y coordinate
	v4 := 4
	if v3 < v4 begin
		v2 := 0
		return
	end

	v4 := 8
	if v3 < v4 begin
		v2 := 8
		return
	end

	v4 := 12
	if v3 < v4 begin
		v2 := 16
		return
	end

	v2 := 24
	return

: get-player-move
	loop
		v0 := key
		if v0 == K-UP begin
			player-move := UP
			return
		end
		if v0 == K-LEFT begin
			player-move := LEFT
			return
		end
		if v0 == K-DOWN begin
			player-move := DOWN
			return
		end
		if v0 == K-RIGHT begin
			player-move := RIGHT
			return
		end
	again

: check-player-move
	is-player-move-valid := 1

	if player-move == UP begin
		if blank-index > 11 then is-player-move-valid := 0
	end
	if player-move == LEFT begin
		v0 := blank-index
		v1 := 0b11
		v0 &= v1
		if v0 == 3 then is-player-move-valid := 0
	end
	if player-move == DOWN begin
		if blank-index < 4 then is-player-move-valid := 0
	end
	if player-move == RIGHT begin
		v0 := blank-index
		v1 := 0b11
		v0 &= v1
		if v0 == 0 then is-player-move-valid := 0
	end

	return

: make-move
	if player-move == UP begin
		v1 := blank-index
		v2 := 4
		v1 += v2
		i := board
		i += v1
		load v0
		i := board
		i += blank-index
		save v0
		v0 := 0
		i := board
		i += v1
		save v0
		blank-index += v2
	end
	if player-move == LEFT begin
		v1 := blank-index
		v2 := 1
		v1 += v2
		i := board
		i += v1
		load v0
		i := board
		i += blank-index
		save v0
		v0 := 0
		i := board
		i += v1
		save v0
		blank-index += v2
	end
	if player-move == DOWN begin
		v1 := blank-index
		v2 := 4
		v1 -= v2
		i := board
		i += v1
		load v0
		i := board
		i += blank-index
		save v0
		v0 := 0
		i := board
		i += v1
		save v0
		blank-index -= v2
	end
	if player-move == RIGHT begin
		v1 := blank-index
		v2 := 1
		v1 -= v2
		i := board
		i += v1
		load v0
		i := board
		i += blank-index
		save v0
		v0 := 0
		i := board
		i += v1
		save v0
		blank-index -= v2
	end

	return

: main
	hires
	blank-index := 15
	display-board
	: game-loop
		get-player-move
		check-player-move
		if is-player-move-valid == 0 then jump game-loop
		make-move
		animate-move
	jump game-loop

: tile
	0b11111110
	0b11111110
	0b11111110
	0b11111110
	0b11111110
	0b11111110
	0b11111110

: board
	 1  2  3  4
	 5  6  7  8
	 9 10 11 12
	13 14 15  0
